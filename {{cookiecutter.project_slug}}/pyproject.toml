{%- set license_classifiers = {
    'MIT license': 'License :: OSI Approved :: MIT License',
    'BSD license': 'License :: OSI Approved :: BSD License',
    'ISC license': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}
[build-system]
requires = ["flit_core >=3.9,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "{{ cookiecutter.project_slug }}"
authors = [
  {name = "{{ cookiecutter.full_name.replace('\"', '\\\"') }}", email = "{{ cookiecutter.email }}"}
]
maintainers = [
  {name = "{{ cookiecutter.full_name.replace('\"', '\\\"') }}", email = "{{ cookiecutter.email }}"}
]
readme = {file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.9.0"
keywords = ["wps", "pywps", "birdhouse", "{{ cookiecutter.project_slug }}"]
{%- if cookiecutter.open_source_license in license_classifiers %}
license = {file = "LICENSE"}
{%- endif %}
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
{%- if cookiecutter.open_source_license in license_classifiers %}
  "{{ license_classifiers[cookiecutter.open_source_license] }}",
{%- endif %}
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX",
  "Programming Language :: Python",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Atmospheric Science",
]
dynamic = ["description", "version"]
dependencies = [
    "click >=8.1.7",
    "jinja2",
    "psutil",
    "pywps >=4.5.1,<4.6",
]

[project.optional-dependencies]
dev = [
"pip >=24.2.0",
{%- if cookiecutter.use_black == 'y' %}
"black ==24.8.0",
"isort == 5.13.2",
{%- endif %}
"bump-my-version >=0.26.0",
"coverage >=7.5.0",
"cruft",
"flit >=3.9.0,<4.0",
"nbval >=0.10.0",
"nbsphinx",
{%- if cookiecutter.use_pytest == 'y' %}
"pytest >=8.0.0",
"pytest-cov >=5.0.0",
{%- endif %}
"ruff >=0.5.7",
"sphinx >=7.0.0",
"tox >=4.18.0",
"watchdog >=4.0.0"
]

[project.scripts]
{{cookiecutter.project_slug}} = "{{cookiecutter.project_slug}}.cli:cli"

[project.urls]
"Issue tracker" = "https://github.com/{{cookiecutter.__gh_slug}}/issues"
"Changelog" = "https://github.com/{{cookiecutter.__gh_slug}}/blob/master/changelog.rst"
"Homepage" = "https://github.com/{{cookiecutter.__gh_slug}}"

[tool]
{%- if cookiecutter.use_black == 'y' %}

[tool.black]
target-version = [
  "py39",
  "py310",
  "py311",
  "py312",
  "py313"
]
{%- endif %}

[tool.bumpversion]
current_version = "{{ cookiecutter.version }}"
commit = true
commit_args = "--no-verify"
tag = true
tag_name = "v{new_version}"
allow_dirty = true

[[tool.bumpversion.files]]
filename = "src/{{ cookiecutter.project_slug }}/__version__.py"
search = "__version__ = \"{current_version}\""
replace = "__version__ = \"{new_version}\""

[[tool.bumpversion.files]]
filenam = "Dockerfile"
search = "Version=\"{current_version}\""
replace = "Version=\"{new_version}\""

[[tool.bumpversion.files]]
filename = ".cruft.json"
search = "\"version\": \"{current_version}\""
replace = "\"version\": \"{new_version}\""

[tool.coverage.paths]
source = ["src/{{ cookiecutter.project_slug }}/", "*/site-packages/{{ cookiecutter.project_slug }}/"]

[tool.coverage.run]
{%- if cookiecutter.use_pytest == 'n' %}
command_line = "-m unittest discover -s tests/"
{%- endif %}
omit = ["tests/*.py"]
relative_files = true
source = ["{{ cookiecutter.project_slug }}"]

[tool.flit.sdist]
include = [
  {%- if cookiecutter.open_source_license in license_classifiers %}
  ".zenodo.json",
  {%- endif %}
  {%- if cookiecutter.create_author_file == 'y' %}
  "AUTHORS.rst",
  {% endif -%}
  "CHANGELOG.rst",
  "CONTRIBUTING.rst",
  {%- if cookiecutter.open_source_license in license_classifiers %}
  "LICENSE",
  {%- endif %}
  "Makefile",
  "README.rst",
  "environment.yml",
  "environment-docs.yml",
  "docs/_static/_images/*.gif",
  "docs/_static/_images/*.jpg",
  "docs/_static/_images/*.png",
  "docs/_static/_images/*.rst",
  "docs/Makefile",
  "docs/conf.py",
  "docs/make.bat",
  "src/{{ cookiecutter.project_slug }}",
  "tests/*.py",
  "tox.ini"
]
exclude = [
  "*.py[co]",
  "__pycache__",
  ".codacy.yml",
  ".dockerignore",
  ".editorconfig",
  ".gitignore",
  ".pre-commit-config.yaml",
  ".readthedocs.yml",
  ".yamllint.yaml",
  "Dockerfile",
  "docker-compose.yml",
  "docs/_*",
  "docs/apidoc/modules.rst",
  "docs/apidoc/{{ cookiecutter.project_slug }}*.rst"
]

{%- if cookiecutter.use_black == 'y' %}

[tool.isort]
profile = "black"
py_version = 39

{%- endif %}

[tool.mypy]
files = "."
# Use strict defaults
strict = true
warn_unreachable = true
warn_no_return = true

[[tool.mypy.overrides]]
# Don't require test functions to include types
module = "tests.*"
allow_untyped_defs = true
disable_error_code = "attr-defined"

{%- if cookiecutter.use_pytest == 'y' %}

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--strict-markers",
	"--tb=native"
]
python_files = ["test_*.py"]
markers = [
	"online: mark test to need internet connection",
	"slow: mark test to be slow"
]
{%- endif %}

[tool.ruff]
src = ["{{ cookiecutter.project_slug }}"]
line-length = 150
target-version = "py38"
exclude = [
  ".eggs",
  ".git",
  "build",
  "docs"
]

[tool.ruff.format]
{%- if cookiecutter.use_black == 'y' %}
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
{%- endif %}
line-ending = "auto"

[tool.ruff.lint]
extend-select = [
  "RUF022" # unsorted-dunder-all
]
ignore = [
  "COM", # commas
  "D205", # blank-line-after-summary
  "D400", # ends-in-period
  "D401" # non-imperative-mood
]
preview = true
select = [
  "BLE", # blind-except
  "C90", # mccabe-complexity
  "D", # docstrings
  "E", # pycodestyle errors
  "FLY002", # static-join-to-fstring
  "G", # logging-format
  "N", # naming conventions
  "PERF", # iterator performance
  "PTH", # pathlib
  "RUF010", # explicit-f-string-type-conversion
  "RUF013", # implicit-optional
  "S", # bandit
  "UP", # python version conventions
  "W" # pycodestyle warnings
]

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true
{%- if cookiecutter.use_black == 'y' %}

[tool.ruff.lint.isort]
known-first-party = ["{{ cookiecutter.project_slug }}"]
case-sensitive = true
detect-same-package = false
lines-after-imports = 2
no-lines-before = ["future", "standard-library"]
{%- endif %}

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.per-file-ignores]
"docs/**" = ["E402"]
"src/{{ cookiecutter.project_slug }}/**/__init__.py" = ["F401", "F403"]
"tests/**" = ["D100", "D101", "D102", "D103", "S101"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 180

[tool.ruff.lint.pydocstyle]
convention = "numpy"
