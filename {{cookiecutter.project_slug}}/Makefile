# Configuration
APP_ROOT := $(abspath $(lastword $(MAKEFILE_LIST))/..)
APP_NAME := {{ cookiecutter.project_slug }}

WPS_URL = http://localhost:{{ cookiecutter.http_port }}

# Used in target refresh-notebooks to make it looks like the notebooks have
# been refreshed from the production server below instead of from the local dev
# instance so the notebooks can also be used as tutorial notebooks.
OUTPUT_URL = https://pavics.ouranos.ca/wpsoutputs

SANITIZE_FILE := https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests/raw/master/notebooks/output-sanitize.cfg

# end of configuration

.DEFAULT_GOAL := help

.PHONY: all
all: help

.PHONY: help
help: ## print this help message. (Default)
	@python -c "$$PRINT_HELP_PYSCRIPT" < $(MAKEFILE_LIST)

#help:
#	@echo "Please use 'make <target>' where <target> is one of:"
#	@echo "  help              to print this help message. (Default)"
#	@echo "  install           to install app by running 'pip install -e .'"
#	@echo "  develop           to install with additional development requirements."
#	@echo "  start             to start $(APP_NAME) service as daemon (background process)."
#	@echo "  stop              to stop $(APP_NAME) service."
#	@echo "  restart           to restart $(APP_NAME) service."
#	@echo "  status            to show status of $(APP_NAME) service."
#	@echo "  clean             to remove all files generated by build and tests."
#	@echo "\nTesting targets:"
#	@echo "  test              to run tests (but skip long running tests)."
#	@echo "  test-all          to run all tests (including long running tests)."
#	@echo "  test-notebooks    to verify Jupyter Notebook test outputs are valid."
#	@echo "  lint              to run code style checks with flake8."
#	@echo "  refresh-notebooks to verify Jupyter Notebook test outputs are valid."
#	@echo "\nSphinx targets:"
#	@echo "  docs              to generate HTML documentation with Sphinx."
#	@echo "\nDeployment targets:"
#	@echo "  dist              to build source and wheel package."

## Build targets

.PHONY: install
install: ## install application
	@echo "Installing application ..."
	@-bash -c 'pip install -e .'
	@echo "\nStart service with \`make start'"

.PHONY: develop
develop: ## install application with development libraries
	@echo "Installing development requirements for tests and docs ..."
	@-bash -c 'pip install -e ".[dev]"'

.PHONY: start
start: ## start service as daemon (background process)
	@echo "Starting application ..."
	@-bash -c "$(APP_NAME) start -d"

.PHONY: stop
stop: ## stop service
	@echo "Stopping application ..."
	@-bash -c "$(APP_NAME) stop"

restart: stop start  ## restart service
	@echo "Restarting application ..."

status: ## show status of service
	@echo "Showing status ..."
	@-bash -c "$(APP_NAME) status"

clean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts

clean-build: ## remove build artifacts
	@echo "Removing build artifacts ..."
	@-rm -fr build/
	@-rm -fr dist/
	@-rm -fr .eggs/
	@-find . -name '*.egg-info' -exec rm -fr {} +
	@-find . -name '*.egg' -exec rm -f {} +
	@-find . -name '*.log' -exec rm -fr {} +
	@-find . -name '*.sqlite' -exec rm -fr {} +

clean-pyc: ## remove Python file artifacts
	@echo "Removing Python file artifacts ..."
	@-find . -name '*.pyc' -exec rm -f {} +
	@-find . -name '*.pyo' -exec rm -f {} +
	@-find . -name '*~' -exec rm -f {} +
	@-find . -name '__pycache__' -exec rm -fr {} +

clean-test: ## remove test and coverage artifacts
	@echo "Removing test artifacts ..."
	@-rm -fr .tox/
	@-rm -f .coverage
	@-rm -fr .pytest_cache

clean-dist: clean  ## run git clean
	@echo "Running 'git clean' ..."
	@git diff --quiet HEAD || echo "There are uncommitted changes! Aborting 'git clean' ..."
	## do not use git clean -e/--exclude here, add them to .gitignore instead
	@-git clean -dfx

clean-docs: ## remove documentation artifacts
	@echo "Removing documentation artifacts ..."
	@-rm -f docs/{{ cookiecutter.project_slug }}.rst
	@-rm -f docs/modules.rst
	$(MAKE) -C docs clean

lint/flake8: ## check style with flake8
	@echo "Running flake8 code style checks ..."
	@bash -c 'flake8 {{ cookiecutter.project_slug }} tests'

{%- if cookiecutter.use_black == 'y' %}
lint/black: ## check style with black
	@echo "Running black code style checks ..."
	@bash -c 'black --check {{ cookiecutter.project_slug }} tests'
{%- endif %}

lint: lint/flake8{%- if cookiecutter.use_black == 'y' %} lint/black{%- endif %} ## check style

test: ## run tests quickly with the default Python
{%- if cookiecutter.use_pytest == 'y' %}
	@bash -c 'pytest'
{%- else %}
	@bash -c 'python setup.py test'
{%- endif %}

test-all: ## run tests on every Python version with tox
	@echo "Running all tests (including slow and online tests) ..."
	@bash -c 'pytest -v tests/'

test-tox: ## run tests on every Python version with tox
	@bash -c 'tox'

notebook-sanitizer: ## sanitize notebooks with configuration file
	@echo "Copying notebook output sanitizer ..."
	@-bash -c "curl -L $(SANITIZE_FILE) -o $(CURDIR)/docs/source/output-sanitize.cfg --silent"

test-notebooks: notebook-sanitizer  ## run notebook-based tests
	@echo "Running notebook-based tests"
	@bash -c "env WPS_URL=$(WPS_URL) pytest --nbval --verbose $(CURDIR)/docs/source/notebooks/ --sanitize-with $(CURDIR)/docs/source/output-sanitize.cfg --ignore $(CURDIR)/docs/source/notebooks/.ipynb_checkpoints"

coverage: ## check code coverage quickly with the default Python
{%- if cookiecutter.use_pytest == 'y' %}
	@bash -c 'coverage run --source {{ cookiecutter.project_slug }} -m pytest'
{%- else %}
	@bash -c 'coverage run --source {{ cookiecutter.project_slug }} setup.py test'
{%- endif %}
	@bash -c 'coverage report -m'
	@bash -c 'coverage html'
	$(BROWSER) htmlcov/index.html

docs: ## generate Sphinx HTML documentation, including API docs
	@-rm -f docs/{{ cookiecutter.project_slug }}.rst
	@-rm -f docs/modules.rst
	@bash -c 'sphinx-apidoc -o docs/ {{ cookiecutter.project_slug }}'
	$(MAKE) -C docs clean
	$(MAKE) -C docs html
	$(BROWSER) docs/_build/html/index.html

servedocs: docs ## compile the docs watching for changes
	@echo "Compiling the docs and watching for changes ..."
	@watchmedo shell-command -p '*.rst' -c '$(MAKE) -C docs html' -R -D .

refresh-notebooks: ## refreshing all notebook outputs under docs/source/notebooks
	@echo "Refresh all notebook outputs under docs/source/notebooks"
	@bash -c 'for nb in $(CURDIR)/docs/source/notebooks/*.ipynb; do WPS_URL="$(WPS_URL)" jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=60 --output "$$nb" "$$nb"; sed -i "s@$(WPS_URL)/outputs/@$(OUTPUT_URL)/@g" "$$nb"; done; cd $(APP_ROOT)'


## Sphinx targets

docs: clean-docs ## generate Sphinx HTML documentation, including API docs
	@echo "Generating docs with Sphinx ..."
	$(MAKE) -C docs html
	@echo "Open your browser to: file:/$(APP_ROOT)/docs/build/html/index.html"
	## do not execute xdg-open automatically since it hangs travis and job does not complete
	@echo "xdg-open $(APP_ROOT)/docs/build/html/index.html"

## Deployment targets

dist: clean ## build source and wheel package
	@echo "Building source and wheel package ..."
	@python setup.py sdist
	@python setup.py bdist_wheel
	@bash -c 'ls -l dist/'

release: dist ## upload source and wheel packages
	@echo "Uploading source and wheel packages ..."
	@bash -c 'twine upload dist/*'
